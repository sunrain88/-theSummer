<!DOCTYPE html >
<html  xml:lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">

    <title>轮播图（改变透明度）</title>
    <style>
        *{
            margin: 0;
            padding: 0;
        }
        p{
            clear: both;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            width: 600px;
            height: 25px;
            line-height: 25px;
        }
        div.lunbo{
            width: 100%;
            height:600px;
            margin-top: 20px;
        }
        ul{
            list-style: none;
            width: 1000px;
            height: 600px;
            left: 50%;
            margin-left:-500px;
            position: relative;
            /*overflow: hidden;*/
            /*background-color: aqua;*/
        }
        ul li{
            position: absolute;
            width: 1000px;
            height: 600px;
            background-color: gray;
        }
        ul li img{
            width: 1000px;
            height: 600px;
        }
    </style>
</head>
<p id="pp">单行文本溢出解决办法，三步完成。1.overflow ：hidden(溢出隐藏)  2.text-overfl ：ellipsis(溢出部分用省略号显示) 3.white-space : nowrap (文本不换行)</p>
<div class="lunbo">
    <ul id = "ul">
        <li><img src="nice-picture/c2b.jpg" alt=""></li>
        <li><img src="nice-picture/c04.jpg" alt=""></li>
        <li><img src="nice-picture/c11.jpg" alt=""></li>
        <li><img src="nice-picture/c27.jpg" alt=""></li>
        <li><img src="nice-picture/c34.jpg" alt=""></li>
    </ul>
</div>
</body>
<script>
    var ul = document.getElementById("ul");
    var lis = ul.children;             /*获取ul列表的子节点*/
    var timer = 0;            /**/
    var tn = 1;                 /*记录setInterval的执行次数*/
    var nus = new Array(lis.length);
    for(var i  = 0;i < nus.length;i++){
        nus[i] = 0;
        lis[i].value = 0;
        lis[i].style.opacity = nus[i];
        lis[i].style.display = "none";
        if(i == 0)
        {
            lis[i].style.display = "block";
            lis[i].value = 2;
        }
    }
    var h = setInterval(function(){
        tn++;
        if(parseInt(tn % 350) == 0) {            /*循环每2秒执行一次*/
            timer++;                            /*定位器，timer为几，那张图片就显示出来*/
            nus[0] = 0;
            nus[1] = 1;
            for (var i = 0; i < lis.length; i++) {
                if (i == timer % lis.length || i == timer % lis.length - 1)     /*当前图片与上一张图片都是block*/
                {
                    lis[i].style.display = "block";
                    lis[timer % lis.length].value = 2;                 /*当前显示区块的value为2*/
                    if( i == 0)
                    continue;
                    lis[(timer % lis.length) - 1].value = 1;             /*当前显示区块上一个区块value为1*/
                }
                else
                {
                    lis[i].style.display = "none";
                    lis[i].value = 0;                             /*所有none的区块value为0*/
                }
            }
            if ((timer % lis.length) == 0){
                for( i = 0;i < lis.length; i++){                     /*将第一张图片的上一张指向最后一张图片，实现循环*/
                lis[i].value = 0;
                lis[i].style.display = "none";
              }
                lis[0].style.display = "block";
                lis[0].value = 2;
                lis[(lis.length - 1)].style.display = "block";
                lis[(lis.length - 1)].value = 1;
            }

         }
        if(nus[0] < 1)
         nus[0] = nus[0] += 0.01;
        if(nus[1] > 0)
         nus[1] = nus[1] -= 0.01;
        for(i = 0; i < lis.length;i++){
            if(lis[i].value == 2){
                lis[i].style.opacity = nus[0];
            }
            if(lis[i].valufe ==1){
                lis[i].style.opacity = nus[1];
            }
            if(lis[i].value ==0){
                lis[i].style.opacity = 0;
            }
        }
    },10);
</script>
</html>
